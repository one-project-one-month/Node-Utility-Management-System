generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  Cash
  Mobile_Banking
}

enum InvoiceStatus {
  Overdue
  Paid
  Pending
}

enum Category {
  Complain
  Maintenance
  Other
}

enum ServiceStatus {
  Pending
  Ongoing
  Resolved
}

enum PriorityLevel {
  Low
  Medium
  High
}

enum RoomStatus {
  Available
  Rented
  Purchased
  InMaintenance
}

enum UserRole {
  Tenant
  Admin
  Staff
}

enum RelationshipToTenant {
  SPOUSE
  PARENT
  CHILD
  SIBLING
  RELATIVE
  FRIEND
  OTHER
}

model User {
  id           String   @id @default(uuid())
  userName     String
  email        String   @unique
  password     String
  role         UserRole
  refreshToken String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String? @unique

  @@map("users")
}

model Tenant {
  id          String   @id @default(uuid())
  name        String
  email       String
  nrc         String
  phoneNo     String
  emergencyNo String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  roomId    String     @unique
  room      Room       @relation(fields: [roomId], references: [id])
  occupants Occupant[]
  user      User?
  contract  Contract? // typo fixed

  @@map("tenants")
}

model Occupant {
  id                   String               @id @default(uuid())
  name                 String
  nrc                  String?
  relationshipToTenant RelationshipToTenant
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  // relations
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@map("occupants")
}

model Room {
  id            String     @id @default(uuid())
  roomNo        Int        @unique
  floor         Int
  dimension     String
  noOfBedRoom   Int
  status        RoomStatus @default(Available)
  sellingPrice  Decimal?
  maxNoOfPeople Int
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // relations
  contract        Contract[]
  tenant          Tenant?
  customerService CustomerService[]
  bill            Bill[]

  @@map("rooms")
}

model Contract {
  id          String   @id @default(uuid())
  expiryDate  DateTime
  createdDate DateTime
  updatedDate DateTime?  

  // relations
  roomId         String       @unique
  room           Room         @relation(fields: [roomId], references: [id])
  tenantId       String       @unique
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  contractTypeId String
  contractType   ContractType @relation(fields: [contractTypeId], references: [id])

  @@map("contracts")
}

model ContractType {
  id         String   @id @default(uuid())
  name       String // 6 months, 12 months
  duration   Int
  price      Decimal
  facilities String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contract Contract[]

  @@map("contract_types")
}

model CustomerService {
  id            String        @id @default(uuid())
  description   String
  category      Category
  status        ServiceStatus
  priorityLevel PriorityLevel
  issuedDate    DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@map("customer_services")
}

model Bill {
  id             String   @id @default(uuid())
  rentalFee      Decimal
  electricityFee Decimal
  waterFee       Decimal
  fineFee        Decimal?
  serviceFee     Decimal?
  groundFee      Decimal
  carParkingFee  Decimal?
  wifiFee        Decimal?
  totalAmount    Decimal
  dueDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  //relations
  room      Room        @relation(fields: [roomId], references: [id])
  roomId    String
  totalUnit TotalUnits?
  invoice   Invoice?

  @@map("bills")
}

model TotalUnits {
  id               String   @id @default(uuid())
  electricityUnits Decimal
  waterUnits       Decimal
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations
  bill   Bill   @relation(fields: [billId], references: [id])
  billId String @unique

  @@map("total_units")
}

model Invoice {
  id        String        @id @default(uuid())
  invoiceNo String        @unique
  status    InvoiceStatus
  dueDate   DateTime?

  // relations
  bill      Bill     @relation(fields: [billId], references: [id])
  billId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  receipt Receipt?

  @@map("invoices")
}

model Receipt {
  id            String        @id @default(uuid())
  paymentMethod PaymentMethod @default(Cash)
  paidDate      DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  //relations
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @unique

  @@map("receipts")
}
