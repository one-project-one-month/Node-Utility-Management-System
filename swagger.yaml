openapi: 3.0.0
info:
  title: REST API DOCS
  version: 1.0.0
  description: API documentation for the Utility Management System

components:
  # Security Schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reusable Schemas (Data Models)
  schemas:
    # API Response Formats
    ApiSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        content:
          nullable: true
        status:
          type: number
          example: 200
    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid email or password
        status:
          type: number
          example: 401

    # User Schemas
    AdminUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: admin
        email:
          type: string
          example: admin@gmail.com
        role:
          type: string
          example: Admin
        tenant_id:
          type: string
          nullable: true
          example:
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    TenantUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        role:
          type: string
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example: 8a9ddf9682d3-974cbaf3-78b9-41f0-b6e9
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    UserRole:
      type: string
      enum: [Admin, Staff, Tenant]
      example: Tenant

    # Customer Service Schema
    CustomerService:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'c54e9b25-d17f-4c8f-9c73-15fd95a62f1f'
        description:
          type: string
          example: 'Light bulb in room 101 needs replacement.'
        category:
          type: string
          enum: [Complain, Maintenance, Other]
        status:
          type: string
          enum: [Pending, Ongoing, Resolved]
        priority_level:
          type: string
          enum: [Low, Medium, High]
        room_id:
          type: string
          format: uuid
          example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'
        issued_date:
          type: string
          example: '2025-10-05T07:15:00.000Z'
        created_at:
          type: string
          example: '2025-10-05T07:15:00.000Z'
        updated_at:
          type: string
          example: '2025-10-05T09:30:00.000Z'

    # Tenant Schema
    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
        name:
          type: string
          example: John Doe
        nrc:
          type: string
          example: '12/ABCD(N)854324'
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        phone_no:
          type: string
          example: '+959452897714'
        emergency_no:
          type: string
          example: '+959202435118'
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        room_id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        room:
          $ref: '#/components/schemas/Room'
        occupants:
          type: array
          items:
            $ref: '#/components/schemas/Occupant'

    # Occupant Schema
    Occupant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        name:
          type: string
          example: Jane Doe
        nrc:
          type: string
          nullable: true
          example: '12/EFGH(N)123456'
        relationship_to_tenant:
          type: string
          enum: [SPOUSE, PARENT, CHILD, SIBLING, RELATIVE, FRIEND, OTHER]
          example: SPOUSE
        tenant_id:
          type: string
          format: uuid
          example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        tenant:
          $ref: '#/components/schemas/Tenant'

    # RelationshipToTenant
    RelationshipToTenant:
      type: string
      enum: [SPOUSE, PARENT, CHILD, SIBLING, RELATIVE, FRIEND, OTHER]
      example: SPOUSE

    # Room Schema
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        room_no:
          type: integer
          example: 414
        floor:
          type: integer
          example: 4
        dimension:
          type: string
          example: 14x20 ft
        no_of_bed_room:
          type: integer
          example: 2
        status:
          type: string
          enum: [Available, Rented, Maintenance]
          example: Rented
        selling_price:
          type: string
          example: '1352275'
        max_no_of_people:
          type: integer
          example: 2
        description:
          type: string
          example: City view with balcony
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.158Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.158Z

    # Receipt Schema
    Receipt:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7fc98505-605f-49d2-a3b8-3c6f6eac0ad2
        payment_method:
          type: string
          enum: [Cash, Mobile Banking]
          example: Cash
        paid_date:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        created_at:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-15T10:59:20.031Z
        invoice:
          $ref: '#/components/schemas/Invoice'

    # Invoice Schema
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        status:
          type: string
          enum: ['Paid', 'Pending', 'Overdue']
          example: Paid
        bill_id:
          type: string
          format: uuid
          example: 201111db86-4f8e-4057-b778-0dd44605d3
        created_at:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-15T10:59:20.031Z

    # Total Units Schemas
    TotalUnits:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        electricity_units:
          type: number
          description: Electricity consumption in units
          example: 125.5
        water_units:
          type: number
          description: Water consumption in units
          example: 45.2
        bill_id:
          type: string
          format: uuid
          example: b2c3d4e5-f6g7-8901-bcde-f23456789012
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z

    # Contract Schema
    Contract:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 456e7890-f12a-34b5-c678-426614174000
        room_id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        contract_type_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        tenant_id:
          type: string
          format: uuid
          example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
        created_date:
          type: string
          format: date-time
          example: 2025-10-01T00:00:00.000Z
        expiry_date:
          type: string
          format: date-time
          example: 2026-09-30T00:00:00.000Z
        updated_date:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        tenant:
          $ref: '#/components/schemas/Tenant'
        room:
          $ref: '#/components/schemas/Room'
        contract_type:
          $ref: '#/components/schemas/ContractType'

    # Contract Type
    ContractType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: b2c3d4e5-f6g7-8901-bcde-f23456789012
        name:
          type: string
          example: 'Standard 1-Year Lease'
        duration:
          type: integer
          example: 12
        price:
          type: number
          example: 1200000
        facilities:
          type: array
          items:
            type: string
          example: ['WiFi', 'Parking', 'Maintenance']
        created_at:
          type: string
          format: date-time
          example: 2025-10-01T00:00:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-01T00:00:00.000Z

    # Pagination Schema
    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
          example: 80
        currentPage:
          type: integer
          example: 1
        lastPage:
          type: integer
          example: 80
        perPage:
          type: integer
          example: 10

    PaginationLinks:
      type: object
      properties:
        next:
          type: string
          nullable: true
          example: 'http://localhost:3000/api/v1/users/?page=2&limit=10'
        prev:
          type: string
          nullable: true
          example: null

    PaginationResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'

  # Reusable Parameters
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        example: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        example: 10

    UserIdParam:
      name: userId
      in: path
      description: User ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3

    TenantIdParam:
      name: tenantId
      in: path
      description: Tenant ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758

    OccupantIdParam:
      name: occupantId
      in: path
      description: Occupant ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: a1b2c3d4-e5f6-7890-abcd-ef1234567890

    CustomerServiceIdParam:
      name: id
      in: path
      description: Customer Service ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: c54e9b25-d17f-4c8f-9c73-15fd95a62f1f

    ReceiptIdParam:
      name: id
      in: path
      description: Receipt ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: 7fc98505-605f-49d2-a3b8-3c6f6eac0ad2

    TotalUnitsIdParam:
      name: id
      in: path
      description: Total Units ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: a1b2c3d4-e5f6-7890-abcd-ef1234567890

    InvoiceIdParam:
      name: invoiceId
      in: path
      description: Invoice ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: d1ea2e8f-c047-48e0-bd90-d26356674d47

    BillIdParam:
      name: billId
      in: path
      description: Bill ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: b2c3d4e5-f6g7-8901-bcde-f23456789012

    RoleFilterParam:
      name: role
      in: query
      description: Filter by user role
      required: false
      schema:
        $ref: '#/components/schemas/UserRole'

    ActiveFilterParam:
      name: is_active
      in: query
      description: Filter by active status
      required: false
      schema:
        type: boolean
        example: true

    PaymentMethodFilterParam:
      name: payment_method
      in: query
      description: Filter by payment method
      required: false
      schema:
        type: string
        enum: [Cash, Mobile Banking]
        example: Cash

    StatusParam:
      name: status
      in: path
      description: Service status filter
      required: true
      schema:
        type: string
        enum: [Pending, Ongoing, Resolved]
        example: Pending

    ContractIdParam:
      name: contractId
      in: path
      description: Contract ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: a1b2c3d4-e5f6-7890-abcd-ef1234567890

    ContractTypeIdParam:
      name: contractTypeId
      in: path
      description: Contract Type ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: b2c3d4e5-f6g7-8901-bcde-f23456789012

    RoomIdParam:
      name: roomId
      in: path
      description: Room ID (UUID)
      required: true
      schema:
        type: string
        format: uuid
        example: d44605d3-4f8e-4057-b778-201111db860d

    RoomStatusFilterParam:
      name: status
      in: query
      description: Filter by room status
      required: false
      schema:
        type: string
        enum: [Available, Rented, Maintenance]
        example: Available

  # Reusable Request Bodies
  requestBodies:
    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: admin@gmail.com
              password:
                type: string
                example: admin123

    CreateUserRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user_name:
                type: string
                example: tenant1
              email:
                type: string
                example: tenant1@gmail.com
              password:
                type: string
                example: tenant1
              role:
                type: string
                enum: [Tenant, Admin, Staff]
                example: Tenant
              tenant_id:
                type: string
                nullable: true
                example:

    UpdateUserRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user_name:
                type: string
                example: tenant1
              email:
                type: string
                example: tenant1@gmail.com
              role:
                type: string
                example: Tenant
              tenant_id:
                type: string
                nullable: true
                example: null

    CreateCustomerServiceRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [description, category, status, priority_level, room_id]
            properties:
              description:
                type: string
                minLength: 10
                example: 'Air conditioning not working properly'
              category:
                type: string
                enum: [Complain, Maintenance, Other]
                example: 'Maintenance'
              status:
                type: string
                enum: [Pending, Ongoing, Resolved]
                example: 'Pending'
              priority_level:
                type: string
                enum: [Low, Medium, High]
                example: 'High'
              room_id:
                type: string
                format: uuid
                example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'

    UpdateCustomerServiceRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: At least `status` and `priority_level` must both be provided.
            properties:
              description:
                type: string
                minLength: 10
                example: 'Rechecked the air conditioning issue.'
              category:
                type: string
                enum: [Complain, Maintenance, Other]
                example: 'Maintenance'
              status:
                type: string
                enum: [Pending, Ongoing, Resolved]
                example: 'Resolved'
              priority_level:
                type: string
                enum: [Low, Medium, High]
                example: 'High'
              room_id:
                type: string
                format: uuid
                example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'

    CreateTenantRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, nrc, email, phone_no, emergency_no, room_id]
            properties:
              name:
                type: string
                minLength: 1
                example: John Doe
              nrc:
                type: string
                minLength: 5
                example: '12/ABCD(N)854324'
              email:
                type: string
                format: email
                example: john.doe@gmail.com
              phone_no:
                type: string
                pattern: '^[0-9]{6,15}$'
                example: '959452897714'
              emergency_no:
                type: string
                pattern: '^[0-9]{6,15}$'
                example: '959202435118'
              room_id:
                type: string
                format: uuid
                example: d44605d3-4f8e-4057-b778-201111db860d
              occupants:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                      example: Jane Doe
                    nrc:
                      type: string
                      minLength: 5
                      nullable: true
                      example: '12/EFGH(N)123456'
                    relationship_to_tenant:
                      type: string
                      enum:
                        [
                          SPOUSE,
                          PARENT,
                          CHILD,
                          SIBLING,
                          RELATIVE,
                          FRIEND,
                          OTHER,
                        ]
                      example: SPOUSE

    UpdateTenantRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                example: John Doe Updated
              nrc:
                type: string
                minLength: 5
                example: '12/ABCD(N)854325'
              email:
                type: string
                format: email
                example: john.updated@gmail.com
              phone_no:
                type: string
                pattern: '^[0-9]{6,15}$'
                example: '959452897715'
              emergency_no:
                type: string
                pattern: '^[0-9]{6,15}$'
                example: '959202435119'
              room_id:
                type: string
                format: uuid
                example: d44605d3-4f8e-4057-b778-201111db860d
              occupant_id:
                type: string
                format: uuid
                example: a1b2c3d4-e5f6-7890-abcd-ef1234567890

    CreateOccupantRequest:
      required: true
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            items:
              type: object
              required: [name, relationship_to_tenant, tenant_id]
              properties:
                name:
                  type: string
                  minLength: 1
                  example: Jane Doe
                nrc:
                  type: string
                  minLength: 5
                  nullable: true
                  example: '12/EFGH(N)123456'
                relationship_to_tenant:
                  type: string
                  enum:
                    [SPOUSE, PARENT, CHILD, SIBLING, RELATIVE, FRIEND, OTHER]
                  example: SPOUSE
                tenant_id:
                  type: string
                  format: uuid
                  example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758

    UpdateOccupantRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                example: Jane Doe Updated
              nrc:
                type: string
                minLength: 5
                nullable: true
                example: '12/EFGH(N)123457'
              relationship_to_tenant:
                type: string
                enum: [SPOUSE, PARENT, CHILD, SIBLING, RELATIVE, FRIEND, OTHER]
                example: SPOUSE
              tenant_id:
                type: string
                format: uuid
                example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758

    DeleteOccupantRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [tenant_id]
            properties:
              tenant_id:
                type: string
                format: uuid
                example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758

    CreateReceiptRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [payment_method, paid_date, invoice_id]
            properties:
              payment_method:
                type: string
                enum: [Cash, Mobile Banking]
                example: Cash
              paid_date:
                type: string
                format: date-time
                example: 2025-10-14T04:07:20.031Z
              invoice_id:
                type: string
                format: uuid
                example: d1ea2e8f-c047-48e0-bd90-d26356674d47

    UpdateReceiptRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              payment_method:
                type: string
                enum: [Cash, Mobile Banking]
                example: Mobile Banking
              paid_date:
                type: string
                format: date-time
                example: 2025-10-14T04:07:20.031Z

    CreateTotalUnitsRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [electricity_units, water_units, bill_id]
            properties:
              electricity_units:
                type: number
                minimum: 0.1
                description: Electricity consumption in units (must be positive)
                example: 125.5
              water_units:
                type: number
                minimum: 0.1
                description: Water consumption in units (must be positive)
                example: 45.2
              bill_id:
                type: string
                format: uuid
                description: Associated bill ID
                example: b2c3d4e5-f6g7-8901-bcde-f23456789012

    UpdateTotalUnitsRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              electricity_units:
                type: number
                minimum: 0.1
                description: Electricity consumption in units (must be positive)
                example: 130.8
              water_units:
                type: number
                minimum: 0.1
                description: Water consumption in units (must be positive)
                example: 48.5
              bill_id:
                type: string
                format: uuid
                description: Associated bill ID
                example: b2c3d4e5-f6g7-8901-bcde-f23456789012

    CreateContractRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              [
                room_id,
                contract_type_id,
                tenant_id,
                created_date,
                expiry_date,
                updated_date,
              ]
            properties:
              room_id:
                type: string
                format: uuid
                example: d44605d3-4f8e-4057-b778-201111db860d
              contract_type_id:
                type: string
                format: uuid
                example: b2c3d4e5-f6g7-8901-bcde-f23456789012
              tenant_id:
                type: string
                format: uuid
                example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
              created_date:
                type: string
                format: date-time
                example: 2025-10-01T00:00:00.000Z
              expiry_date:
                type: string
                format: date-time
                example: 2026-10-01T00:00:00.000Z
              updated_date:
                type: string
                format: date-time
                example: 2025-10-01T00:00:00.000Z

    UpdateContractRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              room_id:
                type: string
                format: uuid
                example: d44605d3-4f8e-4057-b778-201111db860d
              contract_type_id:
                type: string
                format: uuid
                example: b2c3d4e5-f6g7-8901-bcde-f23456789012
              tenant_id:
                type: string
                format: uuid
                example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
              created_date:
                type: string
                format: date-time
                example: 2025-10-01T00:00:00.000Z
              expiry_date:
                type: string
                format: date-time
                example: 2026-10-01T00:00:00.000Z
              updated_date:
                type: string
                format: date-time
                example: 2025-10-01T00:00:00.000Z

    CreateContractTypeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, duration, price, facilities]
            properties:
              name:
                type: string
                minLength: 1
                example: 'Standard 1-Year Lease'
              duration:
                type: integer
                minimum: 1
                example: 12
              price:
                type: number
                minimum: 0
                example: 1200000
              facilities:
                type: array
                items:
                  type: string
                  minLength: 1
                minItems: 1
                example: ['WiFi', 'Parking', 'Maintenance']

    UpdateContractTypeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                example: 'Premium 2-Year Lease'
              duration:
                type: integer
                minimum: 1
                example: 24
              price:
                type: number
                minimum: 0
                example: 2200000
              facilities:
                type: array
                items:
                  type: string
                  minLength: 1
                example: ['WiFi', 'Parking', 'Maintenance', 'Gym Access']

    CreateRoomRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - room_no
              - floor
              - dimension
              - no_of_bed_room
              - status
              - max_no_of_people
            properties:
              room_no:
                type: integer
                minimum: 1
                example: 414
              floor:
                type: integer
                example: 4
              dimension:
                type: string
                example: 14x20 ft
              no_of_bed_room:
                type: integer
                minimum: 1
                example: 2
              status:
                type: string
                enum: [Available, Rented, Maintenance]
                example: Available
              selling_price:
                type: number
                example: 1352275
              max_no_of_people:
                type: integer
                minimum: 1
                example: 2
              description:
                type: string
                example: City view with balcony
              tenant_id:
                type: string
                format: uuid
                nullable: true
              bill_id:
                type: string
                format: uuid
                nullable: true
              customer_service_id:
                type: string
                format: uuid
                nullable: true

    UpdateRoomRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              room_no:
                type: integer
                minimum: 1
                example: 415
              floor:
                type: integer
                example: 4
              dimension:
                type: string
                example: 15x20 ft
              no_of_bed_room:
                type: integer
                minimum: 1
                example: 3
              status:
                type: string
                enum: [Available, Rented, Maintenance]
                example: Rented
              selling_price:
                type: number
                example: 1400000
              max_no_of_people:
                type: integer
                minimum: 1
                example: 3
              description:
                type: string
                example: City view with large balcony

  # Reusable Responses
  responses:
    # Error Response
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Access token is required
                  status:
                    type: integer
                    example: 401

    ForbiddenError:
      description: Forbidden - Admin or Staff role required
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: 'Required roles: Admin, Staff'
                  status:
                    type: integer
                    example: 403

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Resource not found
                  status:
                    type: integer
                    example: 404

    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  status:
                    type: integer
                    example: 400

    # Paginated Response
    PaginatedUsersResponse:
      description: Users fetched successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Users fetched successfully
                  content:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/AdminUser'
                            - $ref: '#/components/schemas/TenantUser'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedCustomerServicesResponse:
      description: Customer services retrieved successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Fetch customer services successfully
                  content:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/CustomerService'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedTenantsResponse:
      description: Tenants retrieved successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: All tenants get successfully
                  content:
                    type: object
                    properties:
                      tenants:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tenant'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedOccupantsResponse:
      description: Occupants retrieved successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: All occupants get successfully
                  content:
                    type: object
                    properties:
                      occupants:
                        type: array
                        items:
                          $ref: '#/components/schemas/Occupant'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedReceiptsResponse:
      description: Receipts fetched successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Receipts fetched successfully
                  content:
                    type: object
                    properties:
                      receipts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Receipt'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedTotalUnitsResponse:
      description: Total units fetched successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Total-units fetched successfully
                  content:
                    type: object
                    properties:
                      totalUnits:
                        type: array
                        items:
                          $ref: '#/components/schemas/TotalUnits'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedContractsResponse:
      description: Contracts fetched successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: All Contracts fetched successfully
                  content:
                    type: object
                    properties:
                      contracts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Contract'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

    PaginatedRoomsResponse:
      description: Rooms fetched successfully with pagination
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiSuccessResponse'
              - type: object
                properties:
                  message:
                    type: string
                    example: Rooms fetched successfully
                  content:
                    type: object
                    properties:
                      rooms:
                        type: array
                        items:
                          $ref: '#/components/schemas/Room'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      links:
                        $ref: '#/components/schemas/PaginationLinks'

paths:
  # Authentication Endpoints
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Sign in a user
      description: Sign in a user with email and password
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          description: User signed in successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign in successful
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/AdminUser'
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Sign out a user
      description: Sign out the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign out successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh the access token using a valid refresh token stored in a cookie
      parameters:
        - name: refreshToken
          in: cookie
          description: Refresh token stored in HTTP-only cookie
          required: false
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        200:
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Token refreshed successfully
                      content:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          $ref: '#/components/responses/UnauthorizedError'

  # User Endpoints
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Retrieves all users (Admin & Staff only)
      description: Retrieves a list of all users with pagination and filtering support. Accessible only only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/RoleFilterParam'
        - $ref: '#/components/parameters/ActiveFilterParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Users
      summary: Create a new user (Admin & Staff only)
      description: Create a new user. Only accessible by Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User created successfully
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/TenantUser'
                      status:
                        type: number
                        example: 201
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID (Admin only)
      description: Retrieve a specific user by their ID. Accessible only to Admin users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        200:
          description: User fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User fetched successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Users
      summary: Update user by ID (Admin & Staff only)
      description: Update user information. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User updated successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Users
      summary: Delete user by ID (Admin & Staff only)
      description: Delete a user account. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      content:
                        type: object
                        $ref: '#/components/schemas/TenantUser'
                      message:
                        type: string
                        example: User deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Customer Service Endpoints
  /api/v1/tenants/{tenantId}/customer-services/create:
    post:
      tags:
        - Customer Services
      summary: Create a new customer service request
      description: Allows a tenant to create a new customer service request.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
      requestBody:
        $ref: '#/components/requestBodies/CreateCustomerServiceRequest'
      responses:
        201:
          description: Customer service created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Customer service created successfully
                      content:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
                      status:
                        type: integer
                        example: 201
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /api/v1/tenants/{tenantId}/customer-services/history/{status}:
    get:
      tags:
        - Customer Services
      summary: Get customer service history by status
      description: Retrieves all customer service records for a tenant filtered by status.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
        - $ref: '#/components/parameters/StatusParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: Customer service history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Fetch service history successfully
                      content:
                        type: object
                        properties:
                          history:
                            type: array
                            items:
                              $ref: '#/components/schemas/CustomerService'
                          meta:
                            $ref: '#/components/schemas/PaginationMeta'
                          links:
                            $ref: '#/components/schemas/PaginationLinks'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /api/v1/customer-services:
    get:
      tags:
        - Customer Services
      summary: Get all customer services (Admin & Staff only)
      description: Retrieves all customer service records with pagination. Accessible to Admin and Staff users only.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomerServicesResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /api/v1/customer-services/{id}:
    get:
      tags:
        - Customer Services
      summary: Get customer service by ID (Admin & Staff only)
      description: Retrieves a single customer service record by its ID.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CustomerServiceIdParam'
      responses:
        200:
          description: Customer service retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Fetch customer service by ID successfully
                      content:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Customer Services
      summary: Update a customer service (Admin & Staff only)
      description: Update the status or priority level of an existing customer service record.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CustomerServiceIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCustomerServiceRequest'
      responses:
        200:
          description: Customer service updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Customer service updated successfully
                      content:
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
        400:
          description: Validation error (both status and priority_level required)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        example: Both status AND priority_level must be provided for update
                      status:
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Tenant Endpoints
  /api/v1/tenants:
    get:
      tags:
        - Tenants
      summary: Get all tenants (Admin & Staff only)
      description: Retrieves a list of all tenants with pagination support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedTenantsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Tenants
      summary: Create a new tenant (Admin & Staff only)
      description: Create a new tenant with name, email, NRC, etc. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateTenantRequest'
      responses:
        201:
          description: Tenant created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant created successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Validation failed
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            path:
                              type: string
                              example: name
                            message:
                              type: string
                              example: Name is required
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /api/v1/tenants/{tenantId}:
    get:
      tags:
        - Tenants
      summary: Get tenant by ID (Admin & Staff only)
      description: Retrieve a specific tenant by their ID. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
      responses:
        200:
          description: Tenant retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant gets successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Tenants
      summary: Update tenant by ID (Admin & Staff only)
      description: Update tenant information. At least one field must be provided. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateTenantRequest'
      responses:
        200:
          description: Tenant updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenants updated successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Occupant Endpoints
  /api/v1/occupants:
    get:
      tags:
        - Occupants
      summary: Get all occupants (Admin & Staff only)
      description: Retrieves a list of all occupants with pagination support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedOccupantsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Occupants
      summary: Create new occupants (Admin & Staff only)
      description: Create one or more occupants for a tenant. All occupants must belong to the same tenant.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateOccupantRequest'
      responses:
        201:
          description: Occupant(s) created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Occupant created successfully
                      content:
                        type: object
                        properties:
                          occupant:
                            type: array
                            items:
                              $ref: '#/components/schemas/Occupant'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: All occupants must belong to the same tenant
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/occupants/{occupantId}:
    get:
      tags:
        - Occupants
      summary: Get occupant by ID (Admin, Staff & Tenant only)
      description: Retrieve a specific occupant by their ID. Accessible to Admin, Staff, and the tenant themselves.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OccupantIdParam'
      responses:
        200:
          description: Occupant retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Occupant gets successfully
                      content:
                        type: object
                        properties:
                          occupant:
                            $ref: '#/components/schemas/Occupant'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Occupants
      summary: Update occupant by ID (Admin & Staff only)
      description: Update occupant information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OccupantIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateOccupantRequest'
      responses:
        200:
          description: Occupant updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Occupant updated successfully
                      content:
                        type: object
                        properties:
                          occupant:
                            $ref: '#/components/schemas/Occupant'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Occupants
      summary: Delete occupant by ID (Admin & Staff only)
      description: Delete an occupant. Requires tenant_id in request body for verification.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OccupantIdParam'
      requestBody:
        $ref: '#/components/requestBodies/DeleteOccupantRequest'
      responses:
        200:
          description: Occupant deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Occupant deleted successfully
                      content:
                        type: object
                        properties:
                          occupant:
                            $ref: '#/components/schemas/Occupant'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant mismatch - cannot delete occupant from another tenant
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Receipt Endpoints
  /api/v1/receipts:
    get:
      tags:
        - Receipts
      summary: Get all receipts (Admin & Staff only)
      description: Retrieves a list of all receipts with pagination and filtering support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/PaymentMethodFilterParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedReceiptsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Receipts
      summary: Create a new receipt (Admin & Staff only)
      description: Create a new receipt for an invoice. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateReceiptRequest'
      responses:
        201:
          description: Receipt created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt created successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or receipt already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt already exists for this invoice
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/receipts/{id}:
    get:
      tags:
        - Receipts
      summary: Get receipt by ID (Admin & Staff only)
      description: Retrieve a specific receipt by its ID. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParam'
      responses:
        200:
          description: Receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt fetched successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Receipts
      summary: Update receipt by ID (Admin & Staff only)
      description: Update receipt information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateReceiptRequest'
      responses:
        200:
          description: Receipt updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt updated successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/receipts/invoices/{invoiceId}:
    get:
      tags:
        - Receipts
      summary: Get receipt by invoice ID (Admin & Staff only)
      description: Retrieve a receipt by its associated invoice ID.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/InvoiceIdParam'
      responses:
        200:
          description: Receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt fetched successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/tenants/{tenantId}/receipts/latest:
    get:
      tags:
        - Receipts
      summary: Get latest receipt by tenant ID
      description: Retrieve the most recent receipt for a specific tenant.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
      responses:
        200:
          description: Latest receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Latest receipts by tenant id fetched successfully
                      content:
                        type: object
                        properties:
                          latestReceipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/tenants/{tenantId}/receipts/history:
    get:
      tags:
        - Receipts
      summary: Get receipt history by tenant ID
      description: Retrieve all receipt history for a specific tenant with pagination.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: Receipt history fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt histories by tenant id fetched successfully
                      content:
                        type: object
                        properties:
                          receiptHistories:
                            type: array
                            items:
                              $ref: '#/components/schemas/Receipt'
                          meta:
                            $ref: '#/components/schemas/PaginationMeta'
                          links:
                            $ref: '#/components/schemas/PaginationLinks'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Total Units Endpoints
  /api/v1/total-units:
    get:
      tags:
        - Total Units
      summary: Get all total units (Admin & Staff only)
      description: Retrieves a list of all total units with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedTotalUnitsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Total Units
      summary: Create new total units (Admin & Staff only)
      description: Create new total units record for a bill.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateTotalUnitsRequest'
      responses:
        201:
          description: Total units created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Total-units created successfully
                      content:
                        type: object
                        properties:
                          totalUnits:
                            $ref: '#/components/schemas/TotalUnits'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or total units already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Total-units already exists for this bill
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/total-units/{id}:
    get:
      tags:
        - Total Units
      summary: Get total units by ID (Admin & Staff only)
      description: Retrieve specific total units record by its ID.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TotalUnitsIdParam'
      responses:
        200:
          description: Total units fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Total-units by id fetched successfully
                      content:
                        type: object
                        properties:
                          totalUnits:
                            $ref: '#/components/schemas/TotalUnits'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Total Units
      summary: Update total units by ID (Admin & Staff only)
      description: Update total units information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TotalUnitsIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateTotalUnitsRequest'
      responses:
        200:
          description: Total units updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Total-units updated successfully
                      content:
                        type: object
                        properties:
                          totalUnits:
                            $ref: '#/components/schemas/TotalUnits'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/total-units/bills/{billId}:
    get:
      tags:
        - Total Units
      summary: Get total units by bill ID (Admin & Staff only)
      description: Retrieve total units record associated with a specific bill.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/BillIdParam'
      responses:
        200:
          description: Total units fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Total-units by bill id fetched successfully
                      content:
                        type: object
                        properties:
                          totalUnits:
                            $ref: '#/components/schemas/TotalUnits'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Contract Endpoints
  /api/v1/contracts:
    post:
      tags:
        - Contracts
      summary: Create a new contract (Admin & Staff only)
      description: Create a new contract between tenant and room with contract type.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateContractRequest'
      responses:
        201:
          description: Contract created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract created successfully
                      content:
                        type: object
                        properties:
                          contract:
                            $ref: '#/components/schemas/Contract'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or contract already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant already has a contract
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    get:
      tags:
        - Contracts
      summary: Get all contracts (Admin & Staff only)
      description: Retrieves a list of all contracts with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedContractsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/contracts/{contractId}:
    put:
      tags:
        - Contracts
      summary: Update contract by ID (Admin & Staff only)
      description: Update contract information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ContractIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContractRequest'
      responses:
        200:
          description: Contract updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract updated successfully
                      content:
                        type: object
                        properties:
                          contract:
                            $ref: '#/components/schemas/Contract'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/contracts/show/{contractId}:
    get:
      tags:
        - Contracts
      summary: Get contract by ID (Admin & Staff only)
      description: Retrieve a specific contract by its ID with tenant, room, and contract type details.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ContractIdParam'
      responses:
        200:
          description: Contract fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract fetched successfully
                      content:
                        type: object
                        properties:
                          contract:
                            $ref: '#/components/schemas/Contract'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/tenants/{tenantId}/contracts:
    get:
      tags:
        - Contracts
      summary: Get all contracts by tenant ID
      description: Retrieve all contracts for a specific tenant. Accessible by Admin, Staff, and the tenant themselves.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdParam'
      responses:
        200:
          description: Contracts fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: All Contracts fetched By tenantId successfully
                      content:
                        type: object
                        properties:
                          contract:
                            $ref: '#/components/schemas/Contract'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Contract Type Endpoints
  /api/v1/contract-types:
    post:
      tags:
        - Contract Types
      summary: Create a new contract type (Admin & Staff only)
      description: Create a new contract type with name, duration, price, and facilities.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateContractTypeRequest'
      responses:
        201:
          description: Contract type created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract type created successfully
                      content:
                        type: object
                        properties:
                          contractType:
                            $ref: '#/components/schemas/ContractType'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or contract type already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract type already exists
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    get:
      tags:
        - Contract Types
      summary: Get all contract types (Admin & Staff only)
      description: Retrieves a list of all contract types.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Contract types fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: All Contract types fetched successfully
                      content:
                        type: object
                        properties:
                          contractTypes:
                            type: array
                            items:
                              $ref: '#/components/schemas/ContractType'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/contract-types/{contractTypeId}:
    get:
      tags:
        - Contract Types
      summary: Get contract type by ID (Admin & Staff only)
      description: Retrieve a specific contract type by its ID.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ContractTypeIdParam'
      responses:
        200:
          description: Contract type retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract type retrieved successfully
                      content:
                        type: object
                        properties:
                          contractType:
                            $ref: '#/components/schemas/ContractType'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Contract Types
      summary: Update contract type by ID (Admin & Staff only)
      description: Update contract type information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ContractTypeIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContractTypeRequest'
      responses:
        200:
          description: Contract type updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Contract type updated successfully
                      content:
                        type: object
                        properties:
                          contractType:
                            $ref: '#/components/schemas/ContractType'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  # Room Endpoints
  /api/v1/rooms:
    post:
      tags:
        - Rooms
      summary: Create a new room (Admin & Staff only)
      description: Create a new room with room details. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateRoomRequest'
      responses:
        201:
          description: Room created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room created successfully
                      content:
                        type: object
                        properties:
                          room:
                            $ref: '#/components/schemas/Room'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or room already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room with this number already exists on this floor
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    get:
      tags:
        - Rooms
      summary: Get all rooms (Admin & Staff only)
      description: Retrieves a list of all rooms with pagination and filtering support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: room_no
          in: query
          description: Filter by room number
          required: false
          schema:
            type: string
            example: '414'
        - name: floor
          in: query
          description: Filter by floor number
          required: false
          schema:
            type: integer
            example: 4
        - $ref: '#/components/parameters/RoomStatusFilterParam'
      responses:
        200:
          $ref: '#/components/responses/PaginatedRoomsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /api/v1/rooms/{roomId}:
    get:
      tags:
        - Rooms
      summary: Get room by ID (Admin & Staff only)
      description: Retrieve a specific room by its ID with contract, bill, customer service, and tenant details.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        200:
          description: Room fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room fetched successfully
                      content:
                        type: object
                        properties:
                          room:
                            $ref: '#/components/schemas/Room'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Rooms
      summary: Update room by ID (Admin & Staff only)
      description: Update room information. At least one field must be provided.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRoomRequest'
      responses:
        200:
          description: Room updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room updated successfully
                      content:
                        type: object
                        properties:
                          room:
                            $ref: '#/components/schemas/Room'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
                      status:
                        type: integer
                        example: 400
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
