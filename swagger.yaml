openapi: 3.0.0
info:
  title: REST API DOCS
  version: 1.0.0
  description: API documentation for the Utility Management System

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Api Response Format
    ApiSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        content:
          nullable: true
        status:
          type: number
          example: 200
    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid email or password
        status:
          type: number
          example: 401
    # User Schema
    AdminUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: admin
        email:
          type: string
          example: admin@gmail.com
        role:
          type: string
          example: Admin
        tenant_id:
          type: string
          nullable: true
          example:
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    TenantUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        role:
          type: string
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example: 8a9ddf9682d3-974cbaf3-78b9-41f0-b6e9
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    UserRole:
      type: string
      enum: [Admin, Staff, Tenant]
      example: Tenant
    CreateUserRequest:
      type: object
      properties:
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        password:
          type: string
          example: tenant1
        role:
          type: string
          enum: [Tenant, Admin, Staff]
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example:
    UpdateUserRequest:
      type: object
      properties:
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        role:
          type: string
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example: null
    # Customer Service Schema
    CreateCustomerServiceRequest:
      type: object
      required: [description, category, status, priority_level, room_id]
      properties:
        description:
          type: string
          minLength: 10
          example: 'Air conditioning not working properly'
        category:
          type: string
          enum: [Complain, Maintenance, Other]
          example: 'Maintenance'
        status:
          type: string
          enum: [Pending, Ongoing, Resolved]
          example: 'Pending'
        priority_level:
          type: string
          enum: [Low, Medium, High]
          example: 'High'
        room_id:
          type: string
          format: uuid
          example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'
    UpdateCustomerServiceRequest:
      type: object
      description: At least `status` and `priority_level` must both be provided.
      properties:
        description:
          type: string
          minLength: 10
          example: 'Rechecked the air conditioning issue.'
        category:
          type: string
          enum: [Complain, Maintenance, Other]
          example: 'Maintenance'
        status:
          type: string
          enum: [Pending, Ongoing, Resolved]
          example: 'Resolved'
        priority_level:
          type: string
          enum: [Low, Medium, High]
          example: 'High'
        room_id:
          type: string
          format: uuid
          example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'
    CustomerService:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'c54e9b25-d17f-4c8f-9c73-15fd95a62f1f'
        description:
          type: string
          example: 'Light bulb in room 101 needs replacement.'
        category:
          type: string
          enum: [Complain, Maintenance, Other]
        status:
          type: string
          enum: [Pending, Ongoing, Resolved]
        priority_level:
          type: string
          enum: [Low, Medium, High]
        room_id:
          type: string
          format: uuid
          example: 'b7a2cc9b-9f7b-46cf-b3f9-19cb94d68c73'
        issued_date:
          type: string
          example: '2025-10-05T07:15:00.000Z'
        created_at:
          type: string
          example: '2025-10-05T07:15:00.000Z'
        updated_at:
          type: string
          example: '2025-10-05T09:30:00.000Z'
    # Tenant Schema
    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
        names:
          type: array
          items:
            type: string
          example: ['Lyle Willms', 'Maxine Ankunding IV']
        emails:
          type: array
          items:
            type: string
            format: email
          example:
            ['lyle.willms79@gmail.com', 'maxine.ankunding.iv90@gmail.com']
        nrcs:
          type: array
          items:
            type: string
          example: ['12/ABCD(N)854324', '12/ABCD(N)895764']
        phone_nos:
          type: array
          items:
            type: string
          example: ['+959452897714', '+959553996447']
        emergency_nos:
          type: array
          items:
            type: string
          example: ['+959202435118']
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.241Z
        room_id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        room:
          $ref: '#/components/schemas/Room'
    CreateTenantRequest:
      type: object
      required: [names, emails, nrcs, phone_nos, emergency_nos, room_id]
      properties:
        names:
          type: array
          items:
            type: string
            minLength: 1
          minItems: 1
          example: ['Lyle Willms', 'Maxine Ankunding IV']
        emails:
          type: array
          items:
            type: string
            format: email
          minItems: 1
          example:
            ['lyle.willms79@gmail.com', 'maxine.ankunding.iv90@gmail.com']
        nrcs:
          type: array
          items:
            type: string
            minLength: 3
          minItems: 1
          example: ['12/ABCD(N)854324', '12/ABCD(N)895764']
        phone_nos:
          type: array
          items:
            type: string
            minLength: 6
          example: ['+959452897714', '+959553996447']
        emergency_nos:
          type: array
          items:
            type: string
            minLength: 6
          example: ['+959202435118']
        room_id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
    UpdateTenantRequest:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
            minLength: 1
          example: ['Lyle Willms', 'Maxine Ankunding IV']
        emails:
          type: array
          items:
            type: string
            format: email
          example:
            ['lyle.willms79@gmail.com', 'maxine.ankunding.iv90@gmail.com']
        nrcs:
          type: array
          items:
            type: string
            minLength: 3
          example: ['12/ABCD(N)854324', '12/ABCD(N)895764']
        phone_nos:
          type: array
          items:
            type: string
            minLength: 6
          example: ['+959452897714', '+959553996447']
        emergency_nos:
          type: array
          items:
            type: string
            minLength: 6
          example: ['+959202435118']
        room_id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
    # Room Schema
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d44605d3-4f8e-4057-b778-201111db860d
        room_no:
          type: integer
          example: 414
        floor:
          type: integer
          example: 4
        dimension:
          type: string
          example: 14x20 ft
        no_of_bed_room:
          type: integer
          example: 2
        status:
          type: string
          enum: [Available, Rented, Maintenance]
          example: Rented
        selling_price:
          type: string
          example: '1352275'
        max_no_of_people:
          type: integer
          example: 2
        description:
          type: string
          example: City view with balcony
        created_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.158Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-05T19:17:18.158Z
    # Receipt Schema
    Receipt:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7fc98505-605f-49d2-a3b8-3c6f6eac0ad2
        payment_method:
          type: string
          enum: [Cash, Mobile Banking]
          example: Cash
        paid_date:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        created_at:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-15T10:59:20.031Z
        invoice_id:
          type: string
          format: uuid
          example: d1ea2e8f-c047-48e0-bd90-d26356674d47
    CreateReceiptRequest:
      type: object
      required: [payment_method, paid_date, invoice_id]
      properties:
        payment_method:
          type: string
          enum: [Cash, Mobile Banking]
          example: Cash
        paid_date:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z
        invoice_id:
          type: string
          format: uuid
          example: d1ea2e8f-c047-48e0-bd90-d26356674d47
    UpdateReceiptRequest:
      type: object
      properties:
        payment_method:
          type: string
          enum: [Cash, Mobile Banking]
          example: Mobile Banking
        paid_date:
          type: string
          format: date-time
          example: 2025-10-14T04:07:20.031Z

paths:
  # Authentication Endpoints
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Sign in a user
      description: Sign in a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin123
      responses:
        200:
          description: User signed in successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign in successful
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/AdminUser'
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Sign out a user
      description: Sign out the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign out successful

        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
  /api/v1/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh the access token using a valid refresh token stored in a cookie
      parameters:
        - name: refreshToken
          in: cookie
          description: Refresh token stored in HTTP-only cookie
          required: false
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        200:
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Token refreshed successfully
                      content:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Refresh token is required

  # User Endpoints
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Retrieves all users (Admin & Staff only)
      description: Retrieves a list of all users with pagination and filtering support. Accessible only only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            $ref: '#/components/schemas/UserRole'
        - name: is_active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
            example: true
      responses:
        200:
          description: Users fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Users fetched successfully
                      content:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              oneOf:
                                - $ref: '#/components/schemas/AdminUser'
                                - $ref: '#/components/schemas/TenantUser'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 2
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 10
                              totalPages:
                                type: integer
                                example: 1
                              totalCount:
                                type: integer
                                example: 2
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
    post:
      tags:
        - Users
      summary: Create a new user (Admin & Staff only)
      description: Create a new user. Only accessible by Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User created successfully
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/TenantUser'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User with this email already exists
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID (Admin only)
      description: Retrieve a specific user by their ID. Accessible only to Admin users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      responses:
        200:
          description: User fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User fetched successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin'
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found
    put:
      tags:
        - Users
      summary: Update user by ID (Admin & Staff only)
      description: Update user information. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User updated successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        400:
          description: Bad Request - Validation error or email already taken
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Validation failed
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            path:
                              type: string
                              example: email
                            message:
                              type: string
                              example: Email is already taken
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found
    delete:
      tags:
        - Users
      summary: Delete user by ID (Admin & Staff only)
      description: Delete a user account. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      content:
                        type: object
                        $ref: '#/components/schemas/TenantUser'
                      message:
                        type: string
                        example: User deleted successfully
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found

  # Customer Service Endpoints
  /api/v1/tenants/{id}/customer-services/create:
    post:
      tags:
        - Customer Services
      summary: Create a new customer service request
      description: Allows a tenant to create a new customer service request.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tenant ID (UUID)
          schema:
            type: string
            format: uuid
            example: 8a9ddf96-82d3-974c-baf3-78b941f0b6e9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerServiceRequest'
      responses:
        201:
          description: Customer service created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Customer service created successfully
                      content:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
                      status:
                        type: integer
                        example: 201
        400:
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Validation failed
        404:
          description: Tenant not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant not found
                      status:
                        example: 404
  /api/v1/tenants/{id}/customer-services/history/{status}:
    get:
      tags:
        - Customer Services
      summary: Get customer service history by status
      description: Retrieves all customer service records for a tenant filtered by status.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tenant ID (UUID)
          schema:
            type: string
            format: uuid
        - name: status
          in: path
          required: true
          description: Service status filter
          schema:
            type: string
            enum: [Pending, Ongoing, Resolved]
            example: Pending
        - name: page
          in: query
          required: false
          description: 'Page number for pagination (default: 1)'
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: 'Number of items per page (default: 10, max: 100)'
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: Customer service history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Fetch service history successfullly
                      content:
                        type: object
                        properties:
                          history:
                            type: array
                            items:
                              $ref: '#/components/schemas/CustomerService'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 1
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 10
                              totalPages:
                                type: integer
                                example: 1
                              totalCount:
                                type: integer
                                example: 1
                      status:
                        type: integer
                        example: 200
        404:
          description: Tenant not found or no service history found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: No customer service history found.
                      status:
                        type: integer
                        example: 404
  /api/v1/customer-services:
    get:
      tags:
        - Customer Services
      summary: Get all customer services (Admin & Staff only)
      description: Retrieves all customer service records with pagination. Accessible to Admin and Staff users only.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Customer services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Fetch customer services successfully
                      content:
                        type: object
                        properties:
                          services:
                            type: array
                            items:
                              $ref: '#/components/schemas/CustomerService'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 1
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 10
                              totalPages:
                                type: integer
                                example: 1
                              totalCount:
                                type: integer
                                example: 1
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Access token is required'
        403:
          description: Forbidden - Admin or Staff only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
                      status:
                        type: integer
                        example: 403
  /api/v1/customer-services/{id}:
    get:
      tags:
        - Customer Services
      summary: Get customer service by ID (Admin & Staff only)
      description: Retrieves a single customer service record by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Customer Service ID (UUID)
          schema:
            type: string
            format: uuid
            example: c54e9b25-d17f-4c8f-9c73-15fd95a62f1f
      responses:
        200:
          description: Customer service retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Fetch customer service by ID successfully
                      content:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
        404:
          description: Customer service not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: No customer service found for Id-c54e9b25-d17f-4c8f-9c73-15fd95a62f1f
    put:
      tags:
        - Customer Services
      summary: Update a customer service (Admin & Staff only)
      description: Update the status or priority level of an existing customer service record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Customer Service ID (UUID)
          schema:
            type: string
            format: uuid
            example: c54e9b25-d17f-4c8f-9c73-15fd95a62f1f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerServiceRequest'
      responses:
        200:
          description: Customer service updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Customer service updated successfully
                      content:
                        properties:
                          service:
                            $ref: '#/components/schemas/CustomerService'
        400:
          description: Validation error (both status and priority_level required)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        example: Both status AND priority_level must be provided for update
                      status:
                        example: 400
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
                      status:
                        example: 403
        404:
          description: Customer service not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: No customer service found for Id-c54e9b25-d17f-4c8f-9c73-15fd95a62f1f
                      status:
                        example: 404

  # Tenant Endpoints
  /api/v1/tenants:
    get:
      tags:
        - Tenants
      summary: Get all tenants (Admin & Staff only)
      description: Retrieves a list of all tenants with pagination support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: Tenants retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: All tenants get successfully
                      content:
                        type: object
                        properties:
                          tenants:
                            type: array
                            items:
                              $ref: '#/components/schemas/Tenant'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 1
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: 2
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 1
                              totalPages:
                                type: integer
                                example: 67
                              totalCount:
                                type: integer
                                example: 67
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
    post:
      tags:
        - Tenants
      summary: Create a new tenant (Admin & Staff only)
      description: Create a new tenant with multiple names, emails, NRCs, etc. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        201:
          description: Tenant created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant created successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Validation failed
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            path:
                              type: string
                              example: names
                            message:
                              type: string
                              example: Array fields must have the same length
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
  /api/v1/tenants/{tenantId}:
    get:
      tags:
        - Tenants
      summary: Get tenant by ID (Admin & Staff only)
      description: Retrieve a specific tenant by their ID. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          description: Tenant ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
      responses:
        200:
          description: Tenant retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant gets successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Tenant not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant not found
    put:
      tags:
        - Tenants
      summary: Update tenant by ID (Admin & Staff only)
      description: Update tenant information. At least one field must be provided. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          description: Tenant ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequest'
      responses:
        200:
          description: Tenant updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenants updated successfully
                      content:
                        type: object
                        properties:
                          tenant:
                            $ref: '#/components/schemas/Tenant'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Tenant not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Tenant not found
  
  # Receipt Endpoints
  /api/v1/receipts:
    get:
      tags:
        - Receipts
      summary: Get all receipts (Admin & Staff only)
      description: Retrieves a list of all receipts with pagination and filtering support. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
        - name: payment_method
          in: query
          description: Filter by payment method
          required: false
          schema:
            type: string
            enum: [Cash, Mobile Banking]
            example: Cash
      responses:
        200:
          description: Receipts fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipts fetched successfully
                      content:
                        type: object
                        properties:
                          receipts:
                            type: array
                            items:
                              allOf:
                                $ref: '#/components/schemas/Receipt'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 2
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: 2
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 2
                              totalPages:
                                type: integer
                                example: 267
                              totalCount:
                                type: integer
                                example: 533
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: No receipts found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: No receipts found
    post:
      tags:
        - Receipts
      summary: Create a new receipt (Admin & Staff only)
      description: Create a new receipt for an invoice. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReceiptRequest'
      responses:
        201:
          description: Receipt created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt created successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request - Validation error or receipt already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt already exists for this invoice
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Invoice not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Invoice not found
  /api/v1/receipts/{id}:
    get:
      tags:
        - Receipts
      summary: Get receipt by ID (Admin & Staff only)
      description: Retrieve a specific receipt by its ID. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Receipt ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 7fc98505-605f-49d2-a3b8-3c6f6eac0ad2
      responses:
        200:
          description: Receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt fetched successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Receipt not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt not found
    put:
      tags:
        - Receipts
      summary: Update receipt by ID (Admin & Staff only)
      description: Update receipt information. At least one field must be provided. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Receipt ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 7fc98505-605f-49d2-a3b8-3c6f6eac0ad2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReceiptRequest'
      responses:
        200:
          description: Receipt updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt updated successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        400:
          description: Bad Request - Validation error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: At least one field must be provided for update
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Receipt not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt not found
  /api/v1/receipts/invoice/{invoiceId}:
    get:
      tags:
        - Receipts
      summary: Get receipt by invoice ID (Admin & Staff only)
      description: Retrieve a receipt by its associated invoice ID. Accessible only to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: invoiceId
          in: path
          description: Invoice ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: d1ea2e8f-c047-48e0-bd90-d26356674d47
      responses:
        200:
          description: Receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt fetched successfully
                      content:
                        type: object
                        properties:
                          receipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: Receipt not found for this invoice
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt not found for this invoice
  /api/v1/tenants/{tenantId}/receipts/latest:
    get:
      tags:
        - Receipts
      summary: Get latest receipt by tenant ID
      description: Retrieve the most recent receipt for a specific tenant.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          description: Tenant ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
      responses:
        200:
          description: Latest receipt fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Latest receipts by tenant id fetched successfully
                      content:
                        type: object
                        properties:
                          latestReceipt:
                            $ref: '#/components/schemas/Receipt'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        404:
          description: Latest receipt not found or tenant not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Latest receipt not found
  /api/v1/tenants/{tenantId}/receipts/history:
    get:
      tags:
        - Receipts
      summary: Get receipt history by tenant ID
      description: Retrieve all receipt history for a specific tenant with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          description: Tenant ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 2ca12c44-dfc8-4c24-a5d3-5ef650b02758
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: Receipt history fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt histories by tenant id fetched successfully
                      content:
                        type: object
                        properties:
                          receiptHistories:
                            type: array
                            items:
                              $ref: '#/components/schemas/Receipt'
                          pagination:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 5
                              prevPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: false
                              nextPage:
                                oneOf:
                                  - type: integer
                                  - type: boolean
                                example: 2
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 10
                              totalPages:
                                type: integer
                                example: 15
                              totalCount:
                                type: integer
                                example: 145
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        404:
          description: Receipt histories not found or tenant not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Receipt histories are not found
