openapi: 3.0.0
info:
  title: REST API DOCS
  version: 1.0.0
  description: API documentation for the Utility Management System

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        content:
          nullable: true
        status:
          type: number
          example: 200
    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid email or password
        status:
          type: number
          example: 401
    AdminUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: admin
        email:
          type: string
          example: admin@gmail.com
        role:
          type: string
          example: Admin
        tenant_id:
          type: string
          nullable: true
          example:
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    TenantUser:
      type: object
      properties:
        id:
          type: string
          example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        role:
          type: string
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example: 8a9ddf9682d3-974cbaf3-78b9-41f0-b6e9
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2025-09-30T18:05:15.112Z
        updated_at:
          type: string
          example: 2025-10-01T03:25:04.296Z
    UserRole:
      type: string
      enum: [Admin, Staff, Tenant]
      example: Tenant
    CreateUserRequest:
      type: object
      properties:
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        password:
          type: string
          example: tenant1
        role:
          type: string
          enum: [Tenant, Admin, Staff]
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example:
    UpdateUserRequest:
      type: object
      properties:
        user_name:
          type: string
          example: tenant1
        email:
          type: string
          example: tenant1@gmail.com
        role:
          type: string
          example: Tenant
        tenant_id:
          type: string
          nullable: true
          example: 

paths:
  # Authentication Endpoints
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Sign in a user
      description: Sign in a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin123
      responses:
        200:
          description: User signed in successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign in successful
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/AdminUser'
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Sign out a user
      description: Sign out the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sign out successful

        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
  /api/v1/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh the access token using a valid refresh token stored in a cookie
      parameters:
        - name: refreshToken
          in: cookie
          description: Refresh token stored in HTTP-only cookie
          required: false
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        200:
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Token refreshed successfully
                      content:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Refresh token is required

  # User Endpoints
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Retrieves all users (Admin & Staff only)
      description: Retrieves a list of all users with pagination and filtering support. Accessible only only to Admin and Staff users.
      security:
        - bearerAuth: []
      # parameters:
      #   - name: page
      #     in: query
      #     description: Page number for pagination
      #     required: false
      #     schema:
      #       type: integer
      #       minimum: 1
      #       example: 1
      #   - name: limit
      #     in: query
      #     description: Number of items per page
      #     required: false
      #     schema:
      #       type: integer
      #       minimum: 1
      #       maximum: 100
      #       example: 10
      #   - name: search
      #     in: query
      #     description: Search term for user names or emails
      #     required: false
      #     schema:
      #       type: string
      #       example: 'admin'
      #   - name: role
      #     in: query
      #     description: Filter by user role
      #     required: false
      #     schema:
      #       $ref: '#/components/schemas/UserRole'
      #   - name: is_active
      #     in: query
      #     description: Filter by active status
      #     required: false
      #     schema:
      #       type: boolean
      #       example: true
      responses:
        200:
          description: Users fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Users fetched successfully
                      content:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              oneOf:
                                - $ref: '#/components/schemas/AdminUser'
                                - $ref: '#/components/schemas/TenantUser'
                          # pagination:
                          #   type: object
                          #   properties:
                          #     page:
                          #       type: integer
                          #       example: 1
                          #     limit:
                          #       type: integer
                          #       example: 10
                          #     total:
                          #       type: integer
                          #       example: 50
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
    post:
      tags:
        - Users
      summary: Create a new user (Admin & Staff only)
      description: Create a new user. Only accessible by Admin and Staff users.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User created successfully
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/TenantUser'
                      status:
                        type: number
                        example: 201
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User with this email already exists
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID (Admin only)
      description: Retrieve a specific user by their ID. Accessible only to Admin users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      responses:
        200:
          description: User fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User fetched successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Access token is required
        403:
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin'
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found
    put:
      tags:
        - Users
      summary: Update user by ID (Admin & Staff only)
      description: Update user information. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User updated successfully
                      content:
                        type: object
                        properties:
                          user:
                            oneOf:
                              - $ref: '#/components/schemas/AdminUser'
                              - $ref: '#/components/schemas/TenantUser'
        400:
          description: Bad Request - Validation error or email already taken
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Validation failed
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            path:
                              type: string
                              example: email
                            message:
                              type: string
                              example: Email is already taken
        403:
          description: Forbidden - Admin or Staff role required
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'Required roles: Admin, Staff'
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found
    delete:
      tags:
        - Users
      summary: Delete user by ID (Admin & Staff only)
      description: Delete a user account. Accessible to Admin and Staff users.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID (UUID)
          required: true
          schema:
            type: string
            format: uuid
            example: 974cbaf3-78b9-41f0-b6e9-8a9ddf9682d3
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      content:
                        type: object
                        $ref: '#/components/schemas/TenantUser'
                      message:
                        type: string
                        example: User deleted successfully
        404:
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User not found

  # Customer Service Endpoints
